"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const got_1 = __importDefault(require("got"));
const path_1 = __importDefault(require("path"));
const Utils_1 = require("./Utils");
const package_json_1 = require("../package.json");
class MeewMeew {
    apikey;
    axios = axios_1.default;
    got = got_1.default;
    path = path_1.default;
    version = package_json_1.version;
    constructor(Apikey) {
        this.apikey = Apikey;
        this.isValidApikey(this.apikey);
        this.checkUpdate(package_json_1.version);
    }
    get HomeURL() {
        return "https://mewdev.pro";
    }
    get ApiURLv2() {
        return this.HomeURL + '/api/v2';
    }
    get ApiURLv1() {
        return this.HomeURL + '/api/v1';
    }
    async checkUpdate(version) {
        const response = await got_1.default.get('https://registry.npmjs.org/-/package/meewmeewapi/dist-tags');
        const data = JSON.parse(response.body);
        if (data.latest !== version)
            console.error(`\x1b[31mmeewmeewapi: New version available, please update with "npm install meewmeewapi@${data.latest}"\x1b[0m`);
        return true;
    }
    getType(obj) {
        return Object.prototype.toString.call(obj).slice(8, -1);
    }
    isValidApikey(apikey) {
        if (!apikey)
            throw new Error('Invalid APIKEY, please check your APIKEY');
        else
            return true;
    }
    writeFile(data, pathFile, resolve, reject) {
        const basePath = path_1.default.resolve(pathFile);
        if (!(0, Utils_1.isValidPath)(basePath))
            return reject({ error: 'Invalid path', success: false });
        fs_extra_1.default.writeFile(basePath, Buffer.from(data), function (error) {
            if (error)
                return reject({ error: error, success: false });
            return resolve({ path: basePath, success: true });
        });
    }
    writeStream(url, pathFile, resolve, reject) {
        const basePath = path_1.default.resolve(pathFile);
        if (!(0, Utils_1.isValidPath)(basePath))
            return reject({ error: 'Invalid path', success: false });
        const writer = fs_extra_1.default.createWriteStream(basePath);
        got_1.default.stream(url).pipe(writer).on('error', (error) => reject({ error: error, success: false }));
        writer.on('finish', () => resolve({ path: basePath, success: true }));
        writer.on('error', (error) => reject({ error: error, success: false }));
    }
}
exports.default = MeewMeew;
