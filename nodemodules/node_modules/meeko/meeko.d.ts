/** Declaration file generated by dts-gen */

export class Crypto {
    constructor(...args: any[]);

    decrypt(...args: any[]): void;

    encrypt(...args: any[]): void;

}

export class Snowflake {
    constructor(...args: any[]);

    nextId(...args: any[]): void;

    tilNextMillis(...args: any[]): void;

    timeGen(...args: any[]): void;

}

export class Spinner {
    constructor(...args: any[]);

    setShowTxt(...args: any[]): void;

    start(...args: any[]): void;

    stop(...args: any[]): void;

}

export class color {
    constructor(color: any, opts: any);

    analogous(...args: any[]): any;

    brighten(...args: any[]): any;

    clone(): any;

    complement(...args: any[]): any;

    darken(...args: any[]): any;

    desaturate(...args: any[]): any;

    getAlpha(): any;

    getBrightness(): any;

    getFormat(): any;

    getLuminance(): any;

    getOriginalInput(): any;

    greyscale(...args: any[]): any;

    isDark(): any;

    isLight(): any;

    isValid(): any;

    lighten(...args: any[]): any;

    monochromatic(...args: any[]): any;

    saturate(...args: any[]): any;

    setAlpha(value: any): any;

    spin(...args: any[]): any;

    splitcomplement(...args: any[]): any;

    tetrad(...args: any[]): any;

    toFilter(secondColor: any): any;

    toHex(allow3Char: any): any;

    toHex8(allow4Char: any): any;

    toHex8String(allow4Char: any): any;

    toHexString(allow3Char: any): any;

    toHsl(): any;

    toHslString(): any;

    toHsv(): any;

    toHsvString(): any;

    toName(): any;

    toPercentageRgb(): any;

    toPercentageRgbString(): any;

    toRgb(): any;

    toRgbString(): any;

    toString(format: any): any;

    triad(...args: any[]): any;

    static equals(color1: any, color2: any): any;

    static fromRatio(color: any, opts: any): any;

    static hexNames: {
        "000": string;
        "000080": string;
        "00008b": string;
        "0000cd": string;
        "006400": string;
        "008000": string;
        "008080": string;
        "008b8b": string;
        "00bfff": string;
        "00ced1": string;
        "00f": string;
        "00fa9a": string;
        "00ff7f": string;
        "0f0": string;
        "0ff": string;
        "191970": string;
        "1e90ff": string;
        "20b2aa": string;
        "228b22": string;
        "2e8b57": string;
        "2f4f4f": string;
        "32cd32": string;
        "3cb371": string;
        "40e0d0": string;
        "4169e1": string;
        "4682b4": string;
        "483d8b": string;
        "48d1cc": string;
        "4b0082": string;
        "556b2f": string;
        "5f9ea0": string;
        "6495ed": string;
        "663399": string;
        "66cdaa": string;
        "696969": string;
        "6a5acd": string;
        "6b8e23": string;
        "708090": string;
        "789": string;
        "7b68ee": string;
        "7cfc00": string;
        "7fff00": string;
        "7fffd4": string;
        "800000": string;
        "800080": string;
        "808000": string;
        "808080": string;
        "87ceeb": string;
        "87cefa": string;
        "8a2be2": string;
        "8b0000": string;
        "8b008b": string;
        "8b4513": string;
        "8fbc8f": string;
        "90ee90": string;
        "9370db": string;
        "9400d3": string;
        "98fb98": string;
        "9932cc": string;
        "9acd32": string;
        a0522d: string;
        a52a2a: string;
        a9a9a9: string;
        add8e6: string;
        adff2f: string;
        afeeee: string;
        b0c4de: string;
        b0e0e6: string;
        b22222: string;
        b8860b: string;
        ba55d3: string;
        bc8f8f: string;
        bdb76b: string;
        c0c0c0: string;
        c71585: string;
        cd5c5c: string;
        cd853f: string;
        d2691e: string;
        d2b48c: string;
        d3d3d3: string;
        d8bfd8: string;
        da70d6: string;
        daa520: string;
        db7093: string;
        dc143c: string;
        dcdcdc: string;
        dda0dd: string;
        deb887: string;
        e0ffff: string;
        e6e6fa: string;
        e9967a: string;
        ea7e5d: string;
        ee82ee: string;
        eee8aa: string;
        f00: string;
        f08080: string;
        f0e68c: string;
        f0f: string;
        f0f8ff: string;
        f0fff0: string;
        f0ffff: string;
        f4a460: string;
        f5deb3: string;
        f5f5dc: string;
        f5f5f5: string;
        f5fffa: string;
        f8f8ff: string;
        fa8072: string;
        faebd7: string;
        faf0e6: string;
        fafad2: string;
        fdf5e6: string;
        ff0: string;
        ff1493: string;
        ff4500: string;
        ff6347: string;
        ff69b4: string;
        ff7f50: string;
        ff8c00: string;
        ffa07a: string;
        ffa500: string;
        ffb6c1: string;
        ffc0cb: string;
        ffd700: string;
        ffdab9: string;
        ffdead: string;
        ffe4b5: string;
        ffe4c4: string;
        ffe4e1: string;
        ffebcd: string;
        ffefd5: string;
        fff: string;
        fff0f5: string;
        fff5ee: string;
        fff8dc: string;
        fffacd: string;
        fffaf0: string;
        fffafa: string;
        ffffe0: string;
        fffff0: string;
    };

    static isReadable(color1: any, color2: any, wcag2: any): any;

    static mix(color1: any, color2: any, amount: any): any;

    static mostReadable(baseColor: any, colorList: any, args: any): any;

    static names: {
        aliceblue: string;
        antiquewhite: string;
        aqua: string;
        aquamarine: string;
        azure: string;
        beige: string;
        bisque: string;
        black: string;
        blanchedalmond: string;
        blue: string;
        blueviolet: string;
        brown: string;
        burlywood: string;
        burntsienna: string;
        cadetblue: string;
        chartreuse: string;
        chocolate: string;
        coral: string;
        cornflowerblue: string;
        cornsilk: string;
        crimson: string;
        cyan: string;
        darkblue: string;
        darkcyan: string;
        darkgoldenrod: string;
        darkgray: string;
        darkgreen: string;
        darkgrey: string;
        darkkhaki: string;
        darkmagenta: string;
        darkolivegreen: string;
        darkorange: string;
        darkorchid: string;
        darkred: string;
        darksalmon: string;
        darkseagreen: string;
        darkslateblue: string;
        darkslategray: string;
        darkslategrey: string;
        darkturquoise: string;
        darkviolet: string;
        deeppink: string;
        deepskyblue: string;
        dimgray: string;
        dimgrey: string;
        dodgerblue: string;
        firebrick: string;
        floralwhite: string;
        forestgreen: string;
        fuchsia: string;
        gainsboro: string;
        ghostwhite: string;
        gold: string;
        goldenrod: string;
        gray: string;
        green: string;
        greenyellow: string;
        grey: string;
        honeydew: string;
        hotpink: string;
        indianred: string;
        indigo: string;
        ivory: string;
        khaki: string;
        lavender: string;
        lavenderblush: string;
        lawngreen: string;
        lemonchiffon: string;
        lightblue: string;
        lightcoral: string;
        lightcyan: string;
        lightgoldenrodyellow: string;
        lightgray: string;
        lightgreen: string;
        lightgrey: string;
        lightpink: string;
        lightsalmon: string;
        lightseagreen: string;
        lightskyblue: string;
        lightslategray: string;
        lightslategrey: string;
        lightsteelblue: string;
        lightyellow: string;
        lime: string;
        limegreen: string;
        linen: string;
        magenta: string;
        maroon: string;
        mediumaquamarine: string;
        mediumblue: string;
        mediumorchid: string;
        mediumpurple: string;
        mediumseagreen: string;
        mediumslateblue: string;
        mediumspringgreen: string;
        mediumturquoise: string;
        mediumvioletred: string;
        midnightblue: string;
        mintcream: string;
        mistyrose: string;
        moccasin: string;
        navajowhite: string;
        navy: string;
        oldlace: string;
        olive: string;
        olivedrab: string;
        orange: string;
        orangered: string;
        orchid: string;
        palegoldenrod: string;
        palegreen: string;
        paleturquoise: string;
        palevioletred: string;
        papayawhip: string;
        peachpuff: string;
        peru: string;
        pink: string;
        plum: string;
        powderblue: string;
        purple: string;
        rebeccapurple: string;
        red: string;
        rosybrown: string;
        royalblue: string;
        saddlebrown: string;
        salmon: string;
        sandybrown: string;
        seagreen: string;
        seashell: string;
        sienna: string;
        silver: string;
        skyblue: string;
        slateblue: string;
        slategray: string;
        slategrey: string;
        snow: string;
        springgreen: string;
        steelblue: string;
        tan: string;
        teal: string;
        thistle: string;
        tomato: string;
        turquoise: string;
        violet: string;
        wheat: string;
        white: string;
        whitesmoke: string;
        yellow: string;
        yellowgreen: string;
    };

    static random(): any;

    static readability(color1: any, color2: any): any;

}

export const option: {
    logTime: boolean;
};

export function benchmark(fn: any, msg: any, num: any): void;

export function compare(k: any, order: any): any;

export function dir(args: any): void;

export function drawTable(data: any, colWidth: any, opt: any): any;

export function err(args: any): any;

export function ext(a: any, b: any, isCall: any): any;

export function getStackTrace(): any;

export function log(args: any): any;

export function now(): void;

export function pipe(funcs: any): void;

export function requireAll(options: any): any;

export function tpl(a: any): any;

export function wait(t: any): any;

export namespace Mock {
    function genBeautyText(): any;

    function genBool(): any;

    function genCard(params: any): any;

    function genColor(params: any): any;

    function genConstellation(): any;

    function genData(o: any, n: any): any;

    function genDatetime(startTime: any, endTime: any): any;

    function genEnum(a: any): any;

    function genImg(option: any): any;

    function genIp(params: any): any;

    function genList(length: any, step: any): any;

    function genName(params: any): any;

    function genPhone(params: any): any;

    function genText(n: any): any;

    function genUUID(len: any, radix: any): any;

    function genUrl(params: any): any;

    function genWord(n: any): any;

}

export namespace array {
    function allCheck(first: any, arg: any): void;

    function chunk(first: any, arg: any): void;

    function copy(first: any, arg: any): void;

    function count(first: any, arg: any): void;

    function countAdv(first: any, arg: any): void;

    function countBy(first: any, arg: any): void;

    function equals(first: any, arg: any): void;

    function except(first: any, arg: any): void;

    function fisherYates(first: any, arg: any): void;

    function flatten(first: any, arg: any): void;

    function groupBy(first: any, arg: any): void;

    function indexOfAll(first: any, arg: any): void;

    function intersect(first: any, arg: any): void;

    function mean(first: any, arg: any): void;

    function median(first: any, arg: any): void;

    function mode(first: any, arg: any): void;

    function orderBy(first: any, arg: any): void;

    function pick(first: any, arg: any): void;

    function remove(first: any, arg: any): void;

    function shuffle(first: any, arg: any): void;

    function subset(first: any, arg: any): void;

    function union(first: any, arg: any): void;

    function unique(first: any, arg: any): void;

}

export namespace bench {
    function benchmark(fn: any, msg: any, num: any): void;

    function json(fn: any, msg: any, n: any): any;

    function print({ funcName, spendTime, perSecVal, n, range, msg, fastStr }: any): void;

    function suite(a: any): void;

}

export namespace buf {
    function join(a: any, splitElm: any): any;

    function split(a: any, spl: any): any;

    namespace zero {
        const BYTES_PER_ELEMENT: number;

        const byteLength: number;

        const byteOffset: number;

        const length: number;

        const offset: number;

        function asciiSlice(): any;

        function asciiWrite(): any;

        function at(p0: any): any;

        function base64Slice(): any;

        function base64Write(): any;

        function base64urlSlice(): any;

        function base64urlWrite(): any;

        function compare(target: any, targetStart: any, targetEnd: any, sourceStart: any, sourceEnd: any, ...args: any[]): any;

        function contact(b: any): any;

        function copy(target: any, targetStart: any, sourceStart: any, sourceEnd: any): any;

        function copyWithin(p0: any, p1: any): any;

        function entries(): any;

        function equals(otherBuffer: any): any;

        function every(p0: any): any;

        function fill(value: any, offset: any, end: any, encoding: any): any;

        function filter(p0: any): any;

        function find(p0: any): any;

        function findIndex(p0: any): any;

        function findLast(p0: any): any;

        function findLastIndex(p0: any): any;

        function forEach(p0: any): any;

        function hexSlice(): any;

        function hexWrite(): any;

        function includes(val: any, byteOffset: any, encoding: any): any;

        function indexOf(val: any, byteOffset: any, encoding: any): any;

        function inspect(recurseTimes: any, ctx: any): any;

        function join(p0: any): any;

        function keys(): any;

        function lastIndexOf(val: any, byteOffset: any, encoding: any): any;

        function latin1Slice(): any;

        function latin1Write(): any;

        function map(p0: any): any;

        function readBigInt64BE(offset: any): any;

        function readBigInt64LE(offset: any): any;

        function readBigUInt64BE(offset: any): any;

        function readBigUInt64LE(offset: any): any;

        function readBigUint64BE(offset: any): any;

        function readBigUint64LE(offset: any): any;

        function readDoubleBE(offset: any): any;

        function readDoubleLE(offset: any): any;

        function readFloatBE(offset: any): any;

        function readFloatLE(offset: any): any;

        function readInt16BE(offset: any): any;

        function readInt16LE(offset: any): any;

        function readInt32BE(offset: any): any;

        function readInt32LE(offset: any): any;

        function readInt8(offset: any): any;

        function readIntBE(offset: any, byteLength: any): any;

        function readIntLE(offset: any, byteLength: any): any;

        function readUInt16BE(offset: any): any;

        function readUInt16LE(offset: any): any;

        function readUInt32BE(offset: any): any;

        function readUInt32LE(offset: any): any;

        function readUInt8(offset: any): any;

        function readUIntBE(offset: any, byteLength: any): any;

        function readUIntLE(offset: any, byteLength: any): any;

        function readUint16BE(offset: any): any;

        function readUint16LE(offset: any): any;

        function readUint32BE(offset: any): any;

        function readUint32LE(offset: any): any;

        function readUint8(offset: any): any;

        function readUintBE(offset: any, byteLength: any): any;

        function readUintLE(offset: any, byteLength: any): any;

        function reduce(p0: any): any;

        function reduceRight(p0: any): any;

        function reverse(): any;

        function set(p0: any): any;

        function slice(start: any, end: any): any;

        function some(p0: any): any;

        function sort(p0: any): any;

        function subarray(start: any, end: any): any;

        function swap16(): any;

        function swap32(): any;

        function swap64(): any;

        function toJSON(): any;

        function toLocaleString(encoding: any, start: any, end: any, ...args: any[]): any;

        function toString(encoding: any, start: any, end: any, ...args: any[]): any;

        function ucs2Slice(): any;

        function ucs2Write(): any;

        function utf8Slice(): any;

        function utf8Write(): any;

        function values(): any;

        function write(string: any, offset: any, length: any, encoding: any): any;

        function writeBigInt64BE(value: any, offset: any): any;

        function writeBigInt64LE(value: any, offset: any): any;

        function writeBigUInt64BE(value: any, offset: any): any;

        function writeBigUInt64LE(value: any, offset: any): any;

        function writeBigUint64BE(value: any, offset: any): any;

        function writeBigUint64LE(value: any, offset: any): any;

        function writeDoubleBE(val: any, offset: any): any;

        function writeDoubleLE(val: any, offset: any): any;

        function writeFloatBE(val: any, offset: any): any;

        function writeFloatLE(val: any, offset: any): any;

        function writeInt16BE(value: any, offset: any): any;

        function writeInt16LE(value: any, offset: any): any;

        function writeInt32BE(value: any, offset: any): any;

        function writeInt32LE(value: any, offset: any): any;

        function writeInt8(value: any, offset: any): any;

        function writeIntBE(value: any, offset: any, byteLength: any): any;

        function writeIntLE(value: any, offset: any, byteLength: any): any;

        function writeUInt16BE(value: any, offset: any): any;

        function writeUInt16LE(value: any, offset: any): any;

        function writeUInt32BE(value: any, offset: any): any;

        function writeUInt32LE(value: any, offset: any): any;

        function writeUInt8(value: any, offset: any): any;

        function writeUIntBE(value: any, offset: any, byteLength: any): any;

        function writeUIntLE(value: any, offset: any, byteLength: any): any;

        function writeUint16BE(value: any, offset: any): any;

        function writeUint16LE(value: any, offset: any): any;

        function writeUint32BE(value: any, offset: any): any;

        function writeUint32LE(value: any, offset: any): any;

        function writeUint8(value: any, offset: any): any;

        function writeUintBE(value: any, offset: any, byteLength: any): any;

        function writeUintLE(value: any, offset: any, byteLength: any): any;

        namespace buffer {
            const byteLength: number;

            function slice(p0: any, p1: any): any;

        }

        namespace parent {
            const byteLength: number;

            function slice(p0: any, p1: any): any;

        }

    }

}

export namespace c {
    const cls: string;

    function b(...args: any[]): void;

    function c(...args: any[]): void;

    function dimb(...args: any[]): void;

    function dimc(...args: any[]): void;

    function dimg(...args: any[]): void;

    function dimm(...args: any[]): void;

    function dimr(...args: any[]): void;

    function dimw(...args: any[]): void;

    function dimy(...args: any[]): void;

    function g(...args: any[]): void;

    function m(...args: any[]): void;

    function r(...args: any[]): void;

    function w(...args: any[]): void;

    function xy(...args: any[]): void;

    function y(...args: any[]): void;

}

export namespace date {
    function date2Str(first: any, arg: any): void;

    function date8(first: any, arg: any): void;

    function dateAdd(first: any, arg: any): void;

    function format(first: any, arg: any): void;

    function getWeek(first: any, arg: any): void;

    function isLeap(first: any, arg: any): void;

    function offset(first: any, arg: any): void;

}

export namespace fake {
    function genImg(option: any): any;

    function idCard(): any;

    function phoneNum(): any;

    function price(beforeDot: any, afterDot: any): any;

    function randColor(colorType: any): any;

    function randData(o: any, n: any): any;

    function randIp(): any;

    function randName(): any;

    function randNum(n: any): any;

    function randSecName(): any;

    function randStr(n: any): any;

    function randTime(startTime: any, endTime: any): any;

    function randUrl(n: any): any;

    function randfirstName(): any;

    function smallAndNum(n: any): any;

    function whichNetwork(s: any): any;

    namespace checkIdCard {
        const genders: {
            female: string;
            male: string;
        };

        const parityBit: number[];

        const powers: number[];

        function check(idCardNo: any): any;

        function check15IdCardNo(idCardNo: any): any;

        function check18IdCardNo(idCardNo: any): any;

        function checkAddressCode(addressCode: any): any;

        function checkBirthDayCode(birDayCode: any): any;

        function checkParityBit(idCardNo: any): any;

        function formateDateCN(day: any): any;

        function getId15(idCardNo: any): any;

        function getId18(idCardNo: any): any;

        function getInfo(idCardNo: any): any;

        function getParityBit(idCardNo: any): any;

    }

}

export namespace file {
    function checkImgComplete(filePath: any, type: any): any;

    function csv2Arr(data: any, splitStr: any, omitFirstRow: any, fn: any): void;

    function deleteAll(path: any): void;

    function getFileMd5(filename: any): any;

    function getFileType(filePath: any): any;

    function readBig(fileName: any, sp: any, cbFunc: any, endFunc: any): void;

}

export namespace geo {
    const ENCODE_AUTO: string;

    function bboxes(minLat: any, minLon: any, maxLat: any, maxLon: any, numberOfChars: any): any;

    function bboxes_int(minLat: any, minLon: any, maxLat: any, maxLon: any, bitDepth: any): any;

    function bd2gd(lat: any, lng: any): any;

    function bd2tx(lat: any, lng: any): any;

    function decode(hashString: any): any;

    function decode_bbox(hashString: any): any;

    function decode_bbox_int(hashInt: any, bitDepth: any): any;

    function decode_bbox_uint64(hashInt: any, bitDepth: any): any;

    function decode_int(hash_int: any, bitDepth: any): any;

    function decode_uint64(hash_int: any, bitDepth: any): any;

    function encode(latitude: any, longitude: any, numberOfChars: any): any;

    function encode_int(latitude: any, longitude: any, bitDepth: any): any;

    function encode_uint64(latitude: any, longitude: any, bitDepth: any): any;

    function gd2bd(lat: any, lng: any): any;

    function gd2wgs84(lat: any, lng: any): any;

    function getDistance(lat1: any, lng1: any, lat2: any, lng2: any): any;

    function neighbor(hashString: any, direction: any): any;

    function neighbor_int(hash_int: any, direction: any, bitDepth: any): any;

    function neighbors(hashString: any): any;

    function neighbors_int(hash_int: any, bitDepth: any): any;

    function tx2bd(lat: any, lng: any): any;

    function wgs842gd(lat: any, lng: any): any;

}

export namespace json {
    function parse(s: any): any;

    function stringify(p0: any, p1: any, p2: any): any;

}

export namespace math {
    class CholeskyDc {
        constructor(...args: any[]);

        isPositiveDefinite(...args: any[]): void;

        solve(...args: any[]): void;

    }

    class Matrix {
        constructor(...args: any[]);

        T(...args: any[]): void;

        V(...args: any[]): void;

        add(...args: any[]): void;

        c(...args: any[]): void;

        colStat(...args: any[]): void;

        dc(...args: any[]): void;

        det(...args: any[]): void;

        diag(...args: any[]): void;

        eigen(...args: any[]): void;

        get(...args: any[]): void;

        inv(...args: any[]): void;

        log(...args: any[]): void;

        mul(...args: any[]): void;

        print(...args: any[]): void;

        rowStat(...args: any[]): void;

        shape(...args: any[]): void;

        sub(...args: any[]): void;

        trace(...args: any[]): void;

    }

    class QrDc {
        constructor(...args: any[]);

        isFullRank(...args: any[]): void;

        solve(...args: any[]): void;

    }

    function allList(len: any, num: any): any;

    function approximatelyEqual(...args: any[]): void;

    function arcsine(a: any, b: any): any;

    function arrangeList(arr: any, num: any): any;

    function arrangement(n: any, m: any): void;

    function autoCorrelation(arr: any, lag: any): any;

    function bernoulli(p: any): any;

    function beta(v: any, w: any, min: any, max: any): any;

    function binomial(n: any, p: any): any;

    function cauchy(a: any, b: any): any;

    function chiSquare(df: any): any;

    function coeVariation(a: any): any;

    function combinList(arr: any, num: any): any;

    function combination(n: any, m: any): void;

    function confidenceIntervals(a: any): any;

    function cosine(min: any, max: any): any;

    function count(a: any): any;

    function countAdv(a: any): any;

    function cov(mat: any): any;

    function covariance(x: any, y: any): any;

    function covarianceCorrect(x: any, y: any): any;

    function doubleLog(min: any, max: any): any;

    function erlang(b: any, c: any): any;

    function exponentFitting(...args: any[]): void;

    function exponential(a: any, b: any): any;

    function exponentialSmoothing(...args: any[]): void;

    function extremeValue(a: any, b: any): any;

    function fRatio(v: any, w: any): any;

    function fac(num: any): any;

    function findMax(o: any): any;

    function fourierAnalysis(a: any): any;

    function gMean(a: any): any;

    function gamma(a: any, b: any, c: any): any;

    function gaussian(A: any): any;

    function gcd(a: any, b: any): any;

    function genRange(s: any, e: any, step: any): void;

    function geometric(p: any): any;

    function hCombin(n: any, m: any): void;

    function hMean(a: any): any;

    function hypergeometric(n: any, N: any, K: any): any;

    function kendall(...args: any[]): void;

    function kurt1(a: any): any;

    function kurt2(a: any): any;

    function kurt3(a: any): any;

    function laplace(a: any, b: any): any;

    function largek(a: any, k: any): any;

    function lcm(a: any, b: any): any;

    function linearFitting(...args: any[]): void;

    function lnFitting(...args: any[]): void;

    function logarithmic(min: any, max: any): any;

    function logistic(a: any, b: any): any;

    function lognormal(a: any, mu: any, sigma: any): any;

    function max(a: any): any;

    function mean(a: any): any;

    function meanDev(a: any): any;

    function median(a: any): any;

    function medianDev(a: any): any;

    function min(a: any): any;

    function mode(a: any): any;

    function murmurHash(key: any, seed: any): any;

    function negativeBinomial(s: any, p: any): any;

    function normal(mu: any, sigma: any): any;

    function num2e(...args: any[]): void;

    function parabolic(min: any, max: any): any;

    function pareto(c: any): any;

    function pascal(s: any, p: any): any;

    function pearson(...args: any[]): void;

    function pearson5(b: any, c: any): any;

    function pearson6(b: any, v: any, w: any): any;

    function poisson(mu: any): any;

    function polyFitting(...args: any[]): void;

    function power(c: any): any;

    function powerFitting(...args: any[]): void;

    function primeFactor(x: any): any;

    function qMean(a: any): any;

    function quantile(a: any, pos: any, type: any): any;

    function quantileAll(a: any, type: any): any;

    function randInt(a: any, b: any): any;

    function range(a: any): any;

    function rayleigh(a: any, b: any): any;

    function secRand(a: any, b: any): any;

    function skew(a: any): any;

    function smallk(a: any, k: any): any;

    function spearman(...args: any[]): void;

    function stat(x: any, y: any, xMean: any, yMean: any): any;

    function stdErr(a: any): any;

    function stddev(a: any): any;

    function stddevCorrect(a: any): any;

    function studentT(df: any): any;

    function sum(a: any): void;

    function triangular(min: any, max: any, c: any): any;

    function uniformBase(a: any, b: any): any;

    function uniformDiscrete(i: any, j: any): any;

    function uniformRandInt(a: any, b: any): any;

    function userSpecified(usf: any, xMin: any, xMax: any, yMin: any, yMax: any): any;

    function variance(a: any): any;

    function varianceCorrect(a: any): any;

    function weibull(a: any, b: any, c: any): any;

    namespace dist {
        function chebyshevn(x: any, y: any): any;

        function cosn(x: any, y: any): any;

        function diceCoefficient(x: any, y: any): any;

        function edit(a: any, b: any): any;

        function euclidean(x: any, y: any): any;

        function euclideans(x: any, y: any): any;

        function hamming(x: any, y: any): any;

        function jaccardCoefficient(x: any, y: any): any;

        function jaccardDistance(x: any, y: any): any;

        function lance(x: any, y: any): any;

        function levenshtein(a: any, b: any): any;

        function manhattan(x: any, y: any): any;

    }

    namespace mat {
        function GaussJordanEliminate(m: any, epsilon: any): any;

        function add(arrA: any, arrB: any): any;

        function deepCopy(arr: any): any;

        function det(m: any): any;

        function dot(vectorA: any, vectorB: any): any;

        function getCol(M: any, n: any): any;

        function identity(n: any): any;

        function inv(m: any): any;

        function isSquare(arr: any): any;

        function lupDecomposition(arr: any): any;

        function map(M: any, f: any): any;

        function mul(arrA: any, arrB: any): any;

        function rowSwitch(m: any, row1: any, row2: any): any;

        function scalar(arr: any, val: any): any;

        function sub(arrA: any, arrB: any): any;

        function transpose(arr: any): any;

        function zero(n: any, m: any): any;

    }

}

export namespace ml {
    class DecisionTree {
        constructor(...args: any[]);

        buildTree(...args: any[]): void;

        decisionSub(...args: any[]): void;

        printTree(...args: any[]): void;

        toTreeObj(...args: any[]): void;

    }

    class Knn {
        constructor(...args: any[]);

        calcDis(...args: any[]): void;

        optimize(...args: any[]): void;

        predict(...args: any[]): void;

        set(...args: any[]): void;

    }

    class NaiveBayes {
        constructor(...args: any[]);

        categorize(...args: any[]): void;

        frequencyTable(...args: any[]): void;

        initializeCategory(...args: any[]): void;

        learn(...args: any[]): void;

        probabilities(...args: any[]): void;

        toJson(...args: any[]): void;

        toJsonObject(...args: any[]): void;

        tokenProbability(...args: any[]): void;

        static fromJson(...args: any[]): void;

    }

    function Pca(data: any, threshold: any, normfunc: any): any;

    function Svd(a: any, withu: any, withv: any, eps: any, tol: any): any;

    function peridForecast(y: any, peridNum: any, nextPoint: any): any;

    namespace util {
        class ConfusionMatrix {
            constructor(...args: any[]);

            addCountByKey(...args: any[]): void;

            fillTag(...args: any[]): void;

            getKappa(...args: any[]): void;

            getMatrix(...args: any[]): void;

        }

        function cov(mat: any): any;

        function infoEntropy(a: any): any;

        function mahalanobis(mat: any, vecType: any, a: any, b: any): any;

        function meanStandard(a: any): any;

        function minMaxNorm(a: any): any;

        function minMaxScale(a: any): any;

        function none(a: any): any;

        function zScoreNorm(a: any): any;

    }

}

export namespace number {
    function fillStr(first: any, arg: any): void;

    function isPrime(first: any, arg: any): void;

    function prettyBytes(first: any, arg: any): void;

    function round(first: any, arg: any): void;

}

export namespace qrcode {
    function generate(data: any, options: any): any;

    function generateHTML(data: any, options: any): any;

}

export namespace reg {
    function gen(s: any): any;

}

export namespace string {
    function ac(first: any, arg: any): void;

    function camelize(first: any, arg: any): void;

    function dc(first: any, arg: any): void;

    function deCamelize(first: any, arg: any): void;

    function ec(first: any, arg: any): void;

    function esHtml(first: any, arg: any): void;

    function fillStr(first: any, arg: any): void;

    function format(first: any, arg: any): void;

    function len(first: any, arg: any): void;

    function reHtml(first: any, arg: any): void;

    function render(first: any, arg: any): void;

    function replaceAll(first: any, arg: any): void;

    function tc(first: any, arg: any): void;

    function times(first: any, arg: any): void;

    function toDate(first: any, arg: any): void;

    function toHtml(first: any, arg: any): void;

    function toInt(first: any, arg: any): void;

    function toLow(first: any, arg: any): void;

    function toMoney(first: any, arg: any): void;

    function toUp(first: any, arg: any): void;

    function upperFirst(first: any, arg: any): void;

}

export namespace tools {
    function checkParam(a: any, b: any): any;

    function copy(o: any): any;

    function drawTable(data: any, colWidth: any, opt: any): any;

    function equals(...args: any[]): void;

    function getType(...args: any[]): void;

    function ifObjEmpty(o: any, ex: any): any;

    function isArray(...args: any[]): void;

    function isBigInt(...args: any[]): void;

    function isBool(...args: any[]): void;

    function isBoolean(...args: any[]): void;

    function isDate(...args: any[]): void;

    function isDecimal(...args: any[]): void;

    function isInt(...args: any[]): void;

    function isNInt(...args: any[]): void;

    function isNull(...args: any[]): void;

    function isNumber(...args: any[]): void;

    function isObj(...args: any[]): void;

    function isObject(...args: any[]): void;

    function isPInt(...args: any[]): void;

    function isRegExp(...args: any[]): void;

    function isString(...args: any[]): void;

    function isUndefined(...args: any[]): void;

    function jsonPack(obj: any, order: any): any;

    function negate(func: any): void;

    function obj2Url(o: any): any;

    function objByString(o: any, s: any): any;

    function rnd(a: any, b: any): any;

    function size(...args: any[]): void;

    function timeAgo(t1: any, t2: any, lng: any): any;

    function uuid(len: any, radix: any): any;

    function wait(t: any): any;

    function waitNotEmpty(o: any, prop: any, fn: any): void;

    namespace c {
        const cls: string;

        function b(...args: any[]): void;

        function c(...args: any[]): void;

        function dimb(...args: any[]): void;

        function dimc(...args: any[]): void;

        function dimg(...args: any[]): void;

        function dimm(...args: any[]): void;

        function dimr(...args: any[]): void;

        function dimw(...args: any[]): void;

        function dimy(...args: any[]): void;

        function g(...args: any[]): void;

        function m(...args: any[]): void;

        function r(...args: any[]): void;

        function w(...args: any[]): void;

        function xy(...args: any[]): void;

        function y(...args: any[]): void;

    }

    namespace genTemp {
        function genHtml(htmlTitle: any, bodyText: any, htmlHeadExtend: any): any;

        function gridTable(arr: any, isOpen: any, isIndex: any): any;

    }

    namespace lzw {
        function compress(...args: any[]): void;

        function uncompress(...args: any[]): void;

    }

    namespace utf8 {
        function decode(...args: any[]): void;

        function encode(...args: any[]): void;

    }

}

export namespace tpl {
    const v: string;

    function config(a: any): void;

}

