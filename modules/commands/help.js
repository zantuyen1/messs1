module.exports.config = {
	name: "help",
	version: "1.0.0",
	hasPermssion: 0,
	credits: "Mirai",
	description: "H∆∞·ªõng d·∫´n cho ng∆∞·ªùi m·ªõi",
	commandCategory: "Danh s√°ch l·ªánh",
	usages: "[T√™n module]",
	cooldowns: 5,
	envConfig: {
		autoUnsend: true,
		delayUnsend: 60
	}
};

module.exports.languages = {
	"vi": {
		"moduleInfo": "‚ï≠‚îÄ‚îÄ‚îÄ‚ïÆ\n    %1\n‚ï∞‚îÄ‚îÄ‚îÄ‚ïØ \nüìúM√¥ t·∫£: %2\n\n¬ª üßûCredit: %7\n¬ª üìÑH∆∞·ªõng d·∫´n c√°ch d√πng: %3\n¬ª üåüThu·ªôc nh√≥m: %4\n¬ª ‚è±Th·ªùi gian ch·ªù: %5 gi√¢y(s)\n¬ª üë•Quy·ªÅn h·∫°n: %6\n‚úéÔπèÔπèÔπèÔπèÔπèÔπèÔπèÔπèÔπèÔπè\nüí•üí¢üí• ƒêi·ªÅu H√†nh B·ªüi VTD üí•üí¢üí•",
		"helpList": '‚âª‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚Ä¢üëáüèª‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚â∫\nüè∞üè∞üè∞ Hi·ªán t·∫°i c√≥ %1 l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng tr√™n bot n√†y\nüåüS·ª≠ d·ª•ng: "%2giupdo + t√™n l·ªánh" ƒë·ªÉ bi·∫øt c√°ch s·ª≠ d·ª•ng l·ªánh\nü§ñBot ƒë∆∞·ª£c ƒëi·ªÅu h√†nh b·ªüi ThanhDieuTV.\n[üíü]\nHelp S·∫Ω T·ª± ƒê·ªông G·ª° Sao 60S',
		"user": "Ng∆∞·ªùi d√πng",
        "adminGroup": "Qu·∫£n tr·ªã vi√™n nh√≥m",
        "adminBot": "Qu·∫£n tr·ªã vi√™n bot"
	},
	"en": {
		"moduleInfo": "„Äå %1 „Äç\n%2\n\n‚ùØ Usage: %3\n‚ùØ Category: %4\n‚ùØ Waiting time: %5 seconds(s)\n‚ùØ Permission: %6\n\n¬ª Module code by %7 ¬´",
		"helpList": '[ There are %1 commands on this bot, Use: "%2help nameCommand" to know how to use! ]',
		"user": "User",
        "adminGroup": "Admin group",
        "adminBot": "Admin bot"
	}
};

module.exports.handleEvent = function ({ api, event, getText }) {
	const { commands } = global.client;
	const { threadID, messageID, body } = event;

	if (!body || typeof body == "undefined" || body.indexOf("help") != 0) return;
	const splitBody = body.slice(body.indexOf("help")).trim().split(/\s+/);
	if (splitBody.length == 1 || !commands.has(splitBody[1].toLowerCase())) return;
	const threadSetting = global.data.threadData.get(parseInt(threadID)) || {};
	const command = commands.get(splitBody[1].toLowerCase());
	const prefix = (threadSetting.hasOwnProperty("PREFIX")) ? threadSetting.PREFIX : global.config.PREFIX;
	return api.sendMessage(getText("moduleInfo", command.config.name, command.config.description, `${prefix}${command.config.name} ${(command.config.usages) ? command.config.usages : ""}`, command.config.commandCategory, command.config.cooldowns, ((command.config.hasPermssion == 0) ? getText("user") : (command.config.hasPermssion == 1) ? getText("adminGroup") : getText("adminBot")), command.config.credits), threadID, messageID);
}

module.exports. run = function({ api, event, args, getText }) {
	const { commands } = global.client;
	const { threadID, messageID } = event;
	const command = commands.get((args[0] || "").toLowerCase());
	const threadSetting = global.data.threadData.get(parseInt(threadID)) || {};
	const { autoUnsend, delayUnsend } = global.configModule[this.config.name];
	const prefix = (threadSetting.hasOwnProperty("PREFIX")) ? threadSetting.PREFIX : global.config.PREFIX;

	if (!command) {
		const arrayInfo = [];
		const page = parseInt(args[0]) || 1;
    const numberOfOnePage = 10;
    let i = 0;
    let msg = "‚âª‚îÄ‚îÄ‚îÄ‚îÄ ‚Ä¢ùôèùôùùôñùô£ùôù ùòøùôûùôöùô™‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚â∫\n";
    
    for (var [name, value] of (commands)) {
      name += `\n‚™º Thu·ªôc nh√≥m: ${value.config.commandCategory}\n‚™º M√¥ t·∫£: ${value.config.description}\n‚™º Th·ªùi gian ch·ªù: ${value.config.cooldowns}s`;
      arrayInfo.push(name);
    }

    arrayInfo.sort((a, b) => a.data - b.data);
    
    const startSlice = numberOfOnePage*page - numberOfOnePage;
    i = startSlice;
    const returnArray = arrayInfo.slice(startSlice, startSlice + numberOfOnePage);
    
    for (let item of returnArray) msg += `‚ü¨${++i}‚ü≠‚Ä¢ ${item}\n\n`;
    const text = `‚ó§______________________‚ó•\n‚ä∂ Trang (${page}/${Math.ceil(arrayInfo.length/numberOfOnePage)})\n‚ä∂ G√µ: "${prefix}help <t√™n l·ªánh>" ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ l·ªánh ƒë√≥\n‚ä∂ Hi·ªán t·∫°i c√≥ ${arrayInfo.length} l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng\n‚ä∂ D√πng ${prefix}help <S·ªë trang>`;
    return api.sendMessage(msg + text, threadID, async (error, info) => {
			if (autoUnsend) {
				await new Promise(resolve => setTimeout(resolve, delayUnsend * 60000));
				return api.unsendMessage(info.messageID);
			} else return;
		});
	}

	return api.sendMessage(getText("moduleInfo", command.config.name, command.config.description, `${prefix}${command.config.name} ${(command.config.usages) ? command.config.usages : ""}`, command.config.commandCategory, command.config.cooldowns, ((command.config.hasPermssion == 0) ? getText("user") : (command.config.hasPermssion == 1) ? getText("adminGroup") : getText("adminBot")), command.config.credits), threadID, messageID);
};