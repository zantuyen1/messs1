module.exports.config = {
    name: "pending",
    version: "1.0.6",
    credits: "CatalizCS mod by Kadeer",
    hasPermssion: 3,
    description: "Qu·∫£n l√Ω tin nh·∫Øn ch·ªù c·ªßa bot",
    commandCategory: "H·ªá th·ªëng admin-bot",
    usages: "[u] [t] [a]",
    cooldowns: 5
};

module.exports.handleReply = async function({ api, event, handleReply, getText }) {
    if (String(event.senderID) !== String(handleReply.author)) return;
    const { body, threadID, messageID } = event;
    var count = 0;

    if (isNaN(body) && body.indexOf("c") == 0 || body.indexOf("cancel") == 0) {
        const index = (body.slice(1, body.length)).split(/\s+/);
        for (const singleIndex of index) {
            console.log(singleIndex);
            if (isNaN(singleIndex) || singleIndex <= 0 || singleIndex > handleReply.pending.length) return api.sendMessage(`‚ùØ ${singleIndex} Kh√¥ng ph·∫£i l√† m·ªôt con s·ªë h·ª£p l·ªá`, threadID, messageID);
        }
        return api.sendMessage(`[‚öúÔ∏è] ƒê√£ t·ª´ ch·ªëi th√†nh c√¥ng`, threadID, messageID);
    }
    else {

        const index = body.split(/\s+/);
        const fs = require("fs");       
        for (const singleIndex of index) {
            if (isNaN(singleIndex) || singleIndex <= 0 || singleIndex > handleReply.pending.length) return api.sendMessage(`[‚öúÔ∏è] ${singleIndex} Kh√¥ng ph·∫£i l√† m·ªôt con s·ªë h·ª£p l·ªá`, threadID, messageID);
            api.unsendMessage(handleReply.messageID);
            api.changeNickname(`¬ª ${global.config.PREFIX} ¬´ ‚Üí ${(!global.config.BOTNAME) ? "Bot c·ªßa JRT <3" : global.config.BOTNAME}`, handleReply.pending[singleIndex - 1].threadID, api.getCurrentUserID());
            api.sendMessage("", event.threadID, () => api.sendMessage({body:`‚ñÇ‚ñÉ‚ñÖ‚ñÜùêãùê®ùêöùêùùê¢ùêßùê†...ùüèùüéùüé%‚ñÜ‚ñÖ‚ñÉ‚ñÇ\n[‚öúÔ∏è] ùë∑ùíâùíÜÃÇ ùíÖùíñùíöùíÜÃ£ÃÇùíï ùíïùíâùíÇÃÄùíèùíâ ùíÑùíêÃÇùíèùíà‚úÖ\n\n[‚öúÔ∏è] ùë©ùíÇÃÇùíö ùëÆùíäùíêÃõÃÄ ùë©ùíêùíô ùë™ùíñÃâùíÇ ùë©ùíÇÃ£ùíè ùë™ùíêÃÅ ùëªùíâùíÜÃÇÃâ ùë∫ùíñÃõÃâ ùë´ùíñÃ£ùíèùíà ùë©ùíêùíï\n[‚öúÔ∏è] ùë∫ùíñÃõÃâ ùíÖùíñÃ£ùíèùíà #ùô¢ùôöùô£ùô™ ùíâùíêùíÇÃ£ÃÜùíÑ #ùôùùôöùô°ùô• ƒëùíÜÃÇÃâ ùíÉùíäùíÜÃÇÃÅùíï ùíïùíêùíÇÃÄùíè ùíÉùíêÃ£ÃÇ ùíçùíÜÃ£ÃÇùíèùíâ ùíÑùíêÃÅ ùíéùíÇÃ£ÃÜùíï ùíïùíìùíÜÃÇùíè ùíÉùíêùíï ùíèùíÇÃÄùíö\n===[‚öúÔ∏è] ùêÇùê®ùêßùê≠ùêöùêúùê≠ [‚öúÔ∏è]===\nm.me/NHD.JRT.262`, attachment: fs.createReadStream(__dirname + "/cache/pending/pending.mp4")} ,handleReply.pending[singleIndex - 1].threadID));
            count+=1;
            
        }
        return api.sendMessage(`[‚öúÔ∏è] ƒê√£ ph√™ duy·ªát th√†nh c√¥ng`, threadID, messageID);
    }
}

module.exports.run = async function({ api, event, args, permission, handleReply }) {
    if (event.senderID != 100033478361032) return api.sendMessage(`[‚ùó] Donate ‚Üí Mbbank/Momo: 0396049649. JRT xin c√°m ∆°n b·∫°n ‚ù§Ô∏è`, event.threadID, event.messageID)
        if (args.join() == "") {api.sendMessage("[‚öúÔ∏è] B·∫°n c√≥ th·ªÉ d√πng pending:\n[‚öúÔ∏è] Pending user: H√†ng ch·ªù ng∆∞·ªùi d√πng\n[‚öúÔ∏è] Pending thread: H√†ng ch·ªù nh√≥m\n[‚öúÔ∏è] Pending all: T·∫•t c·∫£ box ƒëang ch·ªù duy·ªát",event.threadID, event.messageID);
    }
        const content = args.slice(1, args.length);   
     switch (args[0]) {
    case "user":
    case "u":
    case "-u":
    case "User": {
    const { threadID, messageID } = event;
    const commandName = this.config.name;
    var msg = "", index = 1;
    
    try {
        var spam = await api.getThreadList(100, null, ["OTHER"]) || [];
        var pending = await api.getThreadList(100, null, ["PENDING"]) || [];
    } catch (e) { return api.sendMessage("[‚öúÔ∏è] Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒëang ch·ªù", threadID, messageID) }

      const list = [...spam, ...pending].filter(group => group.isGroup == false);

    for (const single of list) msg += `${index++}. ${single.name}(${single.threadID})\n`;

    if (list.length != 0) return api.sendMessage(`[‚öúÔ∏è] T·ªïng s·ªë ng∆∞·ªùi d√πng c·∫ßn duy·ªát: ${list.length} ng∆∞·ªùi d√πng \n[‚öúÔ∏è] Reply s·ªë th·ª© t·ª± b√™n d∆∞·ªõi ƒë·ªÉ duy·ªát\n\n${msg}`, threadID, (error, info) => {
        global.client.handleReply.push({
            name: commandName,
            messageID: info.messageID,
            author: event.senderID,
            pending: list
        })
    }, messageID);
    else return api.sendMessage("[‚öúÔ∏è] Hi·ªán t·∫°i kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong h√†ng ch·ªù", threadID, messageID);
}
    case "thread":
    case "-t":
    case "t":
    case "Thread": {
     const { threadID, messageID } = event;
    const commandName = this.config.name;
    var msg = "", index = 1;
    
    try {
        var spam = await api.getThreadList(100, null, ["OTHER"]) || [];
        var pending = await api.getThreadList(100, null, ["PENDING"]) || [];
    } catch (e) { return api.sendMessage("[‚öúÔ∏è] Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒëang ch·ªù", threadID, messageID) }

    const list = [...spam, ...pending].filter(group => group.isSubscribed && group.isGroup);

    for (const single of list) msg += `${index++}. ${single.name}(${single.threadID})\n`;

    if (list.length != 0) return api.sendMessage(`[‚öúÔ∏è] T·ªïng s·ªë nh√≥m c·∫ßn duy·ªát: ${list.length} nh√≥m \n[‚öúÔ∏è] Reply s·ªë th·ª© t·ª± b√™n d∆∞·ªõi ƒë·ªÉ duy·ªát !!!\n${msg}`, threadID, (error, info) => {
        global.client.handleReply.push({
            name: commandName,
            messageID: info.messageID,
            author: event.senderID,
            pending: list
        })
    }, messageID);
    else return api.sendMessage("[‚öúÔ∏è] Hi·ªán t·∫°i kh√¥ng c√≥ nh√≥m n√†o trong h√†ng ch·ªù", threadID, messageID);
        }
    case "all":
    case "a":
    case "-a":
    case "al": {
     const { threadID, messageID } = event;
    const commandName = this.config.name;
    var msg = "", index = 1;
    
    try {
        var spam = await api.getThreadList(100, null, ["OTHER"]) || [];
        var pending = await api.getThreadList(100, null, ["PENDING"]) || [];
    } catch (e) { return api.sendMessage("[‚öúÔ∏è] Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒëang ch·ªù", threadID, messageID) }

            const listThread = [...spam, ...pending].filter(group => group.isSubscribed && group.isGroup);
        const listUser = [...spam, ...pending].filter(group => group.isGroup == false)
    const list = [...spam, ...pending].filter(group => group.isSubscribed);

    for (const single of list) msg += `${index++}. ${single.name}(${single.threadID})\n`;

    if (list.length != 0) return api.sendMessage(`[‚öúÔ∏è] T·ªïng s·ªë User & Thread c·∫ßn duy·ªát: ${list.length} User & Thread \n[‚öúÔ∏è] Reply s·ªë th·ª© t·ª± b√™n d∆∞·ªõi ƒë·ªÉ duy·ªát !!!\n${msg}`, threadID, (error, info) => {
        global.client.handleReply.push({
            name: commandName,
            messageID: info.messageID,
            author: event.senderID,
            pending: list
        })
    }, messageID);
    else return api.sendMessage("[‚öúÔ∏è] Hi·ªán t·∫°i kh√¥ng c√≥ User & Thread n√†o trong h√†ng ch·ªù", threadID, messageID);
        }
    }       
}
